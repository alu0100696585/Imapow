/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import imagen.ImageClass;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author ImapowSL
 *
 */
public class GUI extends javax.swing.JFrame implements FocusListener, ChangeListener, ActionListener {

    private BufferedImage imageActual;
    private ArrayList<ImageFrame> imagenes;
    private int indiceVentana;
    private Brillo_Contraste bc;
    private FrameTransLin tl;

    public int getIndiceVentana() {
        return indiceVentana;
    }

    public void setIndiceVentana(int indiceVentana) {
        this.indiceVentana = indiceVentana;
    }

    /**
     * Creates new form GUI
     */
    public GUI() {
        imagenes = new ArrayList<ImageFrame>();

        Image icon = new ImageIcon(getClass().getResource("/gui/imapow.png")).getImage();
        setIconImage(icon);

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menu_gui = new javax.swing.JMenuBar();
        Archivo = new javax.swing.JMenu();
        Cargar = new javax.swing.JMenuItem();
        Guardar = new javax.swing.JMenuItem();
        Salir = new javax.swing.JMenuItem();
        Ver = new javax.swing.JMenu();
        EscalaGrises = new javax.swing.JMenuItem();
        HistogramaValAbsol = new javax.swing.JMenuItem();
        HistogramaValAcu = new javax.swing.JMenuItem();
        Diferencia = new javax.swing.JMenuItem();
        imagenDif = new javax.swing.JMenuItem();
        HistEspecific = new javax.swing.JMenuItem();
        Edicion = new javax.swing.JMenu();
        Recortar = new javax.swing.JMenuItem();
        Ecualizar = new javax.swing.JMenuItem();
        Gamma = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        Brillo_Contraste = new javax.swing.JMenuItem();
        TransLin = new javax.swing.JMenuItem();
        Escalado = new javax.swing.JMenuItem();
        Escalado2 = new javax.swing.JMenuItem();
        Rotaciones = new javax.swing.JMenu();
        espejoVertical = new javax.swing.JMenuItem();
        espejoHorizontal = new javax.swing.JMenuItem();
        traspuesta = new javax.swing.JMenuItem();
        multipo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Imapow");
        setMinimumSize(new java.awt.Dimension(340, 25));
        setResizable(false);
        getContentPane().setLayout(null);

        Archivo.setText("Archivo");

        Cargar.setText("Cargar...");
        Cargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarActionPerformed(evt);
            }
        });
        Archivo.add(Cargar);

        Guardar.setText("Guardar...");
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });
        Archivo.add(Guardar);

        Salir.setText("Salir");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });
        Archivo.add(Salir);

        menu_gui.add(Archivo);

        Ver.setText("Ver");

        EscalaGrises.setText("Pasar a escala de grises");
        EscalaGrises.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EscalaGrisesActionPerformed(evt);
            }
        });
        Ver.add(EscalaGrises);

        HistogramaValAbsol.setText("Histograma valores absolutos");
        HistogramaValAbsol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistogramaValAbsolActionPerformed(evt);
            }
        });
        Ver.add(HistogramaValAbsol);

        HistogramaValAcu.setText("Histograma valores acumulados");
        HistogramaValAcu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistogramaValAcuActionPerformed(evt);
            }
        });
        Ver.add(HistogramaValAcu);

        Diferencia.setText("Cambios en una imagen ");
        Diferencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiferenciaActionPerformed(evt);
            }
        });
        Ver.add(Diferencia);

        imagenDif.setText("Imagen diferencia");
        imagenDif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imagenDifActionPerformed(evt);
            }
        });
        Ver.add(imagenDif);

        HistEspecific.setText("Especificacioón histograma");
        HistEspecific.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistEspecificActionPerformed(evt);
            }
        });
        Ver.add(HistEspecific);

        menu_gui.add(Ver);

        Edicion.setText("Edicion");

        Recortar.setText("Recortar");
        Recortar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecortarActionPerformed(evt);
            }
        });
        Edicion.add(Recortar);

        Ecualizar.setText("Ecualizar");
        Ecualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EcualizarActionPerformed(evt);
            }
        });
        Edicion.add(Ecualizar);

        Gamma.setText("Corrección gamma");
        Gamma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GammaActionPerformed(evt);
            }
        });
        Edicion.add(Gamma);

        menu_gui.add(Edicion);

        jMenu1.setText("Herramientas");

        Brillo_Contraste.setText("Brillo y Contraste");
        Brillo_Contraste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Brillo_ContrasteActionPerformed(evt);
            }
        });
        jMenu1.add(Brillo_Contraste);

        TransLin.setText("Transformaciones lineales");
        TransLin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransLinActionPerformed(evt);
            }
        });
        jMenu1.add(TransLin);

        Escalado.setText("Escalado Vecino + Proximo");
        Escalado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EscaladoActionPerformed(evt);
            }
        });
        jMenu1.add(Escalado);

        Escalado2.setText("Escalado Bilineal");
        Escalado2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Escalado2ActionPerformed(evt);
            }
        });
        jMenu1.add(Escalado2);

        menu_gui.add(jMenu1);

        Rotaciones.setText("Rotaciones");

        espejoVertical.setText("Espejo Vertical");
        espejoVertical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                espejoVerticalActionPerformed(evt);
            }
        });
        Rotaciones.add(espejoVertical);

        espejoHorizontal.setText("Espejo Horizontal");
        espejoHorizontal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                espejoHorizontalActionPerformed(evt);
            }
        });
        Rotaciones.add(espejoHorizontal);

        traspuesta.setText("Traspuesta");
        traspuesta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                traspuestaActionPerformed(evt);
            }
        });
        Rotaciones.add(traspuesta);

        multipo.setText("Múltipo");
        multipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multipoActionPerformed(evt);
            }
        });
        Rotaciones.add(multipo);

        menu_gui.add(Rotaciones);

        setJMenuBar(menu_gui);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargarActionPerformed
        // TODO add your handling code here:

        imagenes.add(new ImageFrame(abrirImagen(), this));
        imagenes.get(imagenes.size() - 1).setIndex(imagenes.size() - 1);

    }//GEN-LAST:event_CargarActionPerformed

    //Método que devuelve una imagen abierta desde archivo
    //Retorna un objeto BufferedImagen
    public BufferedImage abrirImagen() {

        //Creamos la variable que será devuelta (la creamos como null)
        BufferedImage bmp = null;

        //Creamos un nuevo cuadro de diálogo para seleccionar imagen
        JFileChooser selector = new JFileChooser();

        //Le damos un título
        selector.setDialogTitle("Seleccione una imagen");

        //Filtramos los tipos de archivos
        FileNameExtensionFilter filtroImagen = new FileNameExtensionFilter("BMP", "bmp");
        selector.setFileFilter(filtroImagen);

        //Abrimos el cuadro de diálog
        int flag = selector.showOpenDialog(null);

        //Comprobamos que pulse en aceptar
        if (flag == JFileChooser.APPROVE_OPTION) {
            try {
                //Devuelve el fichero seleccionado
                File imagenSeleccionada = selector.getSelectedFile();

                //Asignamos a la variable bmp la imagen leida
                bmp = ImageIO.read(imagenSeleccionada);

            }
            catch (Exception e) {
            }

        }
        //Asignamos la imagen cargada a la propiedad imageActual
        imageActual = bmp;
        //Retornamos el valor
        return bmp;
    }

    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
        // TODO add your handling code here:
        System.exit(1);
    }//GEN-LAST:event_SalirActionPerformed

    private void EscalaGrisesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EscalaGrisesActionPerformed
        // TODO add your handling code here:

        if (imageActual == null) {
            JOptionPane.showMessageDialog(null, "No existe una imagen cargada previamente, por favor, cargue una en Archivo->Cargsr..",
                    "Error", JOptionPane.WARNING_MESSAGE);
        }
        else {
            imagenes.add(new ImageFrame(imagenes.get(getIndiceVentana()).EscalaGrises(), this));
            imagenes.get(imagenes.size() - 1).setIndex(imagenes.size() - 1);
        }
    }//GEN-LAST:event_EscalaGrisesActionPerformed

    private void RecortarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecortarActionPerformed
        // TODO add your handling code here:

        if (imageActual == null) {
            JOptionPane.showMessageDialog(null, "No existe una imagen cargada previamente, por favor, cargue una en Archivo->Cargsr..",
                    "Error", JOptionPane.WARNING_MESSAGE);
        }
        else {

            imagenes.add(new ImageFrame(imagenes.get(getIndiceVentana()).roi(imagenes.get(getIndiceVentana()).ix, imagenes.get(getIndiceVentana()).iy, imagenes.get(getIndiceVentana()).fx, imagenes.get(getIndiceVentana()).fy), this));
            imagenes.get(imagenes.size() - 1).setIndex(imagenes.size() - 1);
            /*
             imagenes.add(new ImageFrame(imageActual, this));      //crear nueva ventana
             imagenes.get(imagenes.size() - 1).setIndex(imagenes.size() - 1);
             //cargando el recuadro de la imagen anterior en la nueva imagen 
             imagenes.get(imagenes.size() - 1); //aplicar recorte*/
        }
    }//GEN-LAST:event_RecortarActionPerformed

    private void HistogramaValAbsolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HistogramaValAbsolActionPerformed
        // TODO add your handling code here:

        if (imageActual == null) {
            JOptionPane.showMessageDialog(null, "No existe una imagen cargada previamente, por favor, cargue una en Archivo->Cargsr..",
                    "Error", JOptionPane.WARNING_MESSAGE);
        }
        else {
            HistogramaVA histograma = new HistogramaVA(imagenes.get(getIndiceVentana()).getImagen().getPixels());
            histograma.repaint();
            histograma.setVisible(true);
        }
    }//GEN-LAST:event_HistogramaValAbsolActionPerformed

    private void HistogramaValAcuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HistogramaValAcuActionPerformed
        // TODO add your handling code here:

        if (imageActual == null) {
            JOptionPane.showMessageDialog(null, "No existe una imagen cargada previamente, por favor, cargue una en Archivo->Cargsr..",
                    "Error", JOptionPane.WARNING_MESSAGE);
        }
        else {
            HistogramaVAC histograma = new HistogramaVAC(imagenes.get(getIndiceVentana()).getImagen().getPixels());
            histograma.repaint();
            histograma.setVisible(true);
        }
    }//GEN-LAST:event_HistogramaValAcuActionPerformed

    private void EcualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EcualizarActionPerformed
        // TODO add your handling code here:

        if (imageActual == null) {
            JOptionPane.showMessageDialog(null, "No existe una imagen cargada previamente, por favor, cargue una en Archivo->Cargsr..",
                    "Error", JOptionPane.WARNING_MESSAGE);
        }
        else {
            imagenes.add(new ImageFrame(imagenes.get(getIndiceVentana()).Ecualizar(), this));
            imagenes.get(imagenes.size() - 1).setIndex(imagenes.size() - 1);
        }
    }//GEN-LAST:event_EcualizarActionPerformed

    private void DiferenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiferenciaActionPerformed
        // TODO add your handling code here:

        if (imageActual == null) {
            JOptionPane.showMessageDialog(null, "No existe una imagen cargada previamente, por favor, cargue una en Archivo->Cargsr..",
                    "Error", JOptionPane.WARNING_MESSAGE);
        }
        else {

            String th = JOptionPane.showInputDialog("Ingrese el umbral de comparacion: ");

            imagenes.add(new ImageFrame(imagenes.get(getIndiceVentana()).getImagen().compare(new ImageClass(abrirImagen()), Integer.parseInt(th)), this));
            imagenes.get(imagenes.size() - 1).setIndex(imagenes.size() - 1);
        }
    }//GEN-LAST:event_DiferenciaActionPerformed

    private void GammaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GammaActionPerformed
        // TODO add your handling code here:

        if (imageActual == null) {
            JOptionPane.showMessageDialog(null, "No existe una imagen cargada previamente, por favor, cargue una en Archivo->Cargsr..",
                    "Error", JOptionPane.WARNING_MESSAGE);
        }
        else {

            String g = JOptionPane.showInputDialog("Ingrese la corrección gamma: ");

            imagenes.add(new ImageFrame(imagenes.get(getIndiceVentana()).getImagen().gamma(Float.parseFloat(g)), this));
            imagenes.get(imagenes.size() - 1).setIndex(imagenes.size() - 1);

        }
    }//GEN-LAST:event_GammaActionPerformed

    private void HistEspecificActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HistEspecificActionPerformed
        // TODO add your handling code here:

        if (imageActual == null) {
            JOptionPane.showMessageDialog(null, "No existe una imagen cargada previamente, por favor, cargue una en Archivo->Cargsr..",
                    "Error", JOptionPane.WARNING_MESSAGE);
        }
        else {

            imagenes.add(new ImageFrame(imagenes.get(getIndiceVentana()).getImagen().HistogramSpecification(new ImageClass(abrirImagen())), this));
            imagenes.get(imagenes.size() - 1).setIndex(imagenes.size() - 1);
        }
    }//GEN-LAST:event_HistEspecificActionPerformed

    private void Brillo_ContrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Brillo_ContrasteActionPerformed
        // TODO add your handling code here:7
        bc = new Brillo_Contraste(this);
        bc.setVisible(true);
    }//GEN-LAST:event_Brillo_ContrasteActionPerformed

    private void TransLinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransLinActionPerformed
        // TODO add your handling code here:

        tl = new FrameTransLin(this);

    }//GEN-LAST:event_TransLinActionPerformed

    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();

        //Le damos un título
        fc.setDialogTitle("Seleccione la ubicación");

        //Filtramos los tipos de archivos
        FileNameExtensionFilter filtroImagen = new FileNameExtensionFilter("BMP", "bmp");
        fc.setFileFilter(filtroImagen);

        int r = fc.showSaveDialog(null);
        if (r == JFileChooser.APPROVE_OPTION) {
            File archivo = fc.getSelectedFile();
            try {
                ImageIO.write(imageActual, "bmp", archivo);
            }
            catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_GuardarActionPerformed

    private void imagenDifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imagenDifActionPerformed
        // TODO add your handling code here:
        
        imagenes.add(new ImageFrame(imagenes.get(getIndiceVentana()).getImagen().compare(new ImageClass(abrirImagen()), 255), this));
        imagenes.get(imagenes.size() - 1).setIndex(imagenes.size() - 1);
        
    }//GEN-LAST:event_imagenDifActionPerformed

    private void espejoVerticalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_espejoVerticalActionPerformed
       
        if (imageActual == null) {
            JOptionPane.showMessageDialog(null, "No existe una imagen cargada previamente, por favor, cargue una en Archivo->Cargsr..",
                    "Error", JOptionPane.WARNING_MESSAGE);
        }
        else {

            imagenes.add(new ImageFrame(imagenes.get(getIndiceVentana()).mirrorV(), this));
            imagenes.get(imagenes.size() - 1).setIndex(imagenes.size() - 1);
        }
        
    }//GEN-LAST:event_espejoVerticalActionPerformed

    private void espejoHorizontalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_espejoHorizontalActionPerformed
      
        if (imageActual == null) {
            JOptionPane.showMessageDialog(null, "No existe una imagen cargada previamente, por favor, cargue una en Archivo->Cargsr..",
                    "Error", JOptionPane.WARNING_MESSAGE);
        }
        else {

            imagenes.add(new ImageFrame(imagenes.get(getIndiceVentana()).mirrorH(), this));
            imagenes.get(imagenes.size() - 1).setIndex(imagenes.size() - 1);
        }
        
    }//GEN-LAST:event_espejoHorizontalActionPerformed

    private void traspuestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_traspuestaActionPerformed
      
        if (imageActual == null) {
            JOptionPane.showMessageDialog(null, "No existe una imagen cargada previamente, por favor, cargue una en Archivo->Cargsr..",
                    "Error", JOptionPane.WARNING_MESSAGE);
        }
        else {

            imagenes.add(new ImageFrame(imagenes.get(getIndiceVentana()).trasp(), this));
            imagenes.get(imagenes.size() - 1).setIndex(imagenes.size() - 1);
        }
       
    }//GEN-LAST:event_traspuestaActionPerformed

    private void multipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multipoActionPerformed
      
        if (imageActual == null) {
            JOptionPane.showMessageDialog(null, "No existe una imagen cargada previamente, por favor, cargue una en Archivo->Cargsr..",
                    "Error", JOptionPane.WARNING_MESSAGE);
        }
        else {
            
            String g = JOptionPane.showInputDialog("Ingrese rotación 90º, 180º 0 270º: ");
            
            if ("90".equals(g) || "90º".equals(g)) {               
                ImageFrame aux = new ImageFrame(imagenes.get(getIndiceVentana()).trasp(), this);
                aux.setVisible(false);

                imagenes.add(new ImageFrame(aux.mirrorH(), this));
                imagenes.get(imagenes.size() - 1).setIndex(imagenes.size() - 1);
            }
            else if ("180".equals(g) || "180º".equals(g)) {              
                imagenes.add(new ImageFrame(imagenes.get(getIndiceVentana()).mirrorV(), this));
                imagenes.get(imagenes.size() - 1).setIndex(imagenes.size() - 1);                
            }
            else if ("270".equals(g) || "270º".equals(g)) {
                imagenes.add(new ImageFrame(imagenes.get(getIndiceVentana()).trasp(), this));
                imagenes.get(imagenes.size() - 1).setIndex(imagenes.size() - 1);
            }
            else {
                JOptionPane.showMessageDialog(null, "Rotacion invalida",
                    "Error", JOptionPane.WARNING_MESSAGE);
            }
        }
       
    }//GEN-LAST:event_multipoActionPerformed

    private void EscaladoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EscaladoActionPerformed
        if (imageActual == null) {
            JOptionPane.showMessageDialog(null, "No existe una imagen cargada previamente, por favor, cargue una en Archivo->Cargsr..",
                    "Error", JOptionPane.WARNING_MESSAGE);
        }
        else {

            String h = JOptionPane.showInputDialog("Ingrese la ampliacion horizontal: ");
            String v = JOptionPane.showInputDialog("Ingrese la ampliacion vertical: ");
            imagenes.add(new ImageFrame(imagenes.get(getIndiceVentana()).getImagen().Scale(Float.parseFloat(h),Float.parseFloat(v),false), this));
            imagenes.get(imagenes.size() - 1).setIndex(imagenes.size() - 1);
        }
    }//GEN-LAST:event_EscaladoActionPerformed

    private void Escalado2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Escalado2ActionPerformed
            if (imageActual == null) {
            JOptionPane.showMessageDialog(null, "No existe una imagen cargada previamente, por favor, cargue una en Archivo->Cargsr..",
                    "Error", JOptionPane.WARNING_MESSAGE);
        }
        else {

            String h = JOptionPane.showInputDialog("Ingrese la ampliacion horizontal: ");
            String v = JOptionPane.showInputDialog("Ingrese la ampliacion vertical: ");

           imagenes.add(new ImageFrame(imagenes.get(getIndiceVentana()).getImagen().Scale(Float.parseFloat(h),Float.parseFloat(v),true), this));
           imagenes.get(imagenes.size() - 1).setIndex(imagenes.size() - 1);
        }
    }//GEN-LAST:event_Escalado2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */

        try {
            javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");

        }
        catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        GUI programa = new GUI();
        programa.setVisible(true);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Archivo;
    private javax.swing.JMenuItem Brillo_Contraste;
    private javax.swing.JMenuItem Cargar;
    private javax.swing.JMenuItem Diferencia;
    private javax.swing.JMenuItem Ecualizar;
    private javax.swing.JMenu Edicion;
    private javax.swing.JMenuItem EscalaGrises;
    private javax.swing.JMenuItem Escalado;
    private javax.swing.JMenuItem Escalado2;
    private javax.swing.JMenuItem Gamma;
    private javax.swing.JMenuItem Guardar;
    private javax.swing.JMenuItem HistEspecific;
    private javax.swing.JMenuItem HistogramaValAbsol;
    private javax.swing.JMenuItem HistogramaValAcu;
    private javax.swing.JMenuItem Recortar;
    private javax.swing.JMenu Rotaciones;
    private javax.swing.JMenuItem Salir;
    private javax.swing.JMenuItem TransLin;
    private javax.swing.JMenu Ver;
    private javax.swing.JMenuItem espejoHorizontal;
    private javax.swing.JMenuItem espejoVertical;
    private javax.swing.JMenuItem imagenDif;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar menu_gui;
    private javax.swing.JMenuItem multipo;
    private javax.swing.JMenuItem traspuesta;
    // End of variables declaration//GEN-END:variables

    private boolean inicializando = false;

    @Override
    public void focusGained(FocusEvent e) {

        //conseguir el indice de la ventana focuseada
        ImageFrame aux = (ImageFrame) e.getSource();
        indiceVentana = aux.getIndex();
        imageActual = aux.getImagen().get_picture();

        //actulizar brillo y contraste 
        if (bc != null) {

            inicializando = true;

            bc.set_sliderBrillo(imagenes.get(getIndiceVentana()).getImagen().imgBrightness());
            bc.set_sliderContraste(imagenes.get(getIndiceVentana()).getImagen().imgContrast());

            inicializando = false;

        }

    }

    @Override
    public void focusLost(FocusEvent e) {
    }

    @Override
    public void stateChanged(ChangeEvent e) {

        if (inicializando) {
            return;
        }

        int b = bc.get_sliderBrillo();
        int c = bc.get_sliderContraste();
        
        bc.set_infBrillo(b);  bc.set_infContraste(c);

        imagenes.get(getIndiceVentana()).ByC(b, c, false); // 0 para n omodificar la imagen del frame
    }

    @Override
    public void actionPerformed(ActionEvent ae) {
        if (tl != null) {
            if (tl.getAceptar() == ae.getSource()) {
                imagenes.add(new ImageFrame(imagenes.get(getIndiceVentana()).TransformLin(tl.get_valores()), this));
                imagenes.get(imagenes.size() - 1).setIndex(imagenes.size() - 1);
            }
        }

        if (bc != null) {
            if (bc.getAceptar() == ae.getSource()) {

                int b = bc.get_sliderBrillo();
                int c = bc.get_sliderContraste();
                imagenes.get(getIndiceVentana()).ByC(b, c, true); // 1 porque se aplican los cambios definitivos

            }
        }

    }
}
